{"ast":null,"code":"const knapsack = (items, capacity) => {\n  const n = items.length;\n  const table = Array.from({\n    length: n + 1\n  }, () => Array(capacity + 1).fill(0));\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= capacity; j++) {\n      if (items[i - 1][0] <= j) {\n        table[i][j] = Math.max(table[i - 1][j], table[i][j - items[i - 1][0]] + items[i - 1][1]);\n      } else {\n        table[i][j] = table[i - 1][j];\n      }\n    }\n  }\n  const result = [];\n  let i = n;\n  let j = capacity;\n  while (i > 0 && j > 0) {\n    if (table[i][j] !== table[i - 1][j]) {\n      result.push(items[i - 1]);\n      j -= items[i - 1][0];\n    } else {\n      i -= 1;\n    }\n  }\n  return result.reverse(); // inverte o array para que fique igual ao da função em Python\n};\n\nexport default knapsack;","map":{"version":3,"names":["knapsack","items","capacity","n","length","table","Array","from","fill","i","j","Math","max","result","push","reverse"],"sources":["/home/isaac/myProjects/dofus-doploons/dooplons-front/src/functions/knapsack.js"],"sourcesContent":["const knapsack = (items, capacity) => {\n  const n = items.length;\n  const table = Array.from({ length: n + 1 }, () =>\n    Array(capacity + 1).fill(0)\n  );\n\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= capacity; j++) {\n      if (items[i - 1][0] <= j) {\n        table[i][j] = Math.max(\n          table[i - 1][j],\n          table[i][j - items[i - 1][0]] + items[i - 1][1]\n        );\n      } else {\n        table[i][j] = table[i - 1][j];\n      }\n    }\n  }\n\n  const result = [];\n  let i = n;\n  let j = capacity;\n  while (i > 0 && j > 0) {\n    if (table[i][j] !== table[i - 1][j]) {\n      result.push(items[i - 1]);\n      j -= items[i - 1][0];\n    } else {\n      i -= 1;\n    }\n  }\n\n  return result.reverse(); // inverte o array para que fique igual ao da função em Python\n};\n\nexport default knapsack;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACpC,MAAMC,CAAC,GAAGF,KAAK,CAACG,MAAM;EACtB,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAED,CAAC,GAAG;EAAE,CAAC,EAAE,MAC1CG,KAAK,CAACJ,QAAQ,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC,CAC5B;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,CAAC,EAAEM,CAAC,EAAE,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIR,QAAQ,EAAEQ,CAAC,EAAE,EAAE;MAClC,IAAIT,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIC,CAAC,EAAE;QACxBL,KAAK,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CACpBP,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,EACfL,KAAK,CAACI,CAAC,CAAC,CAACC,CAAC,GAAGT,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGR,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAChD;MACH,CAAC,MAAM;QACLJ,KAAK,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGL,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC;MAC/B;IACF;EACF;EAEA,MAAMG,MAAM,GAAG,EAAE;EACjB,IAAIJ,CAAC,GAAGN,CAAC;EACT,IAAIO,CAAC,GAAGR,QAAQ;EAChB,OAAOO,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,EAAE;IACrB,IAAIL,KAAK,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC,KAAKL,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE;MACnCG,MAAM,CAACC,IAAI,CAACb,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACzBC,CAAC,IAAIT,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,MAAM;MACLA,CAAC,IAAI,CAAC;IACR;EACF;EAEA,OAAOI,MAAM,CAACE,OAAO,EAAE,CAAC,CAAC;AAC3B,CAAC;;AAED,eAAef,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}