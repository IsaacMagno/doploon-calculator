{"ast":null,"code":"import knapsack from \"./knapsack\";\nconst SMALL_DOOPLOONS = 20;\nconst MEDIUM_DOOPLOONS = 60;\nconst GREAT_DOOPLOONS = 140;\nconst POWERFUL_DOOPLOONS = 340;\nconst dooplon_optimizator = (doploon_quantity, small_price, medium_price, great_price, powerful_price) => {\n  const scrolls = [{\n    weight: SMALL_DOOPLOONS,\n    value: int(small_price)\n  }, {\n    weight: MEDIUM_DOOPLOONS,\n    value: int(medium_price)\n  }, {\n    weight: GREAT_DOOPLOONS,\n    value: int(great_price)\n  }, {\n    weight: POWERFUL_DOOPLOONS,\n    value: powerful_price\n  }];\n  console.log(scrolls, doploon_quantity);\n  const result = knapsack(scrolls, doploon_quantity);\n  let small = 0;\n  let total_small_price = 0;\n  let medium = 0;\n  let total_medium_price = 0;\n  let great = 0;\n  let total_great_price = 0;\n  let powerful = 0;\n  let total_powerful_price = 0;\n  for (const scroll of result) {\n    if (scroll[0] === 20) {\n      small += 1;\n      total_small_price += scroll[1];\n    }\n    if (scroll[0] === 60) {\n      medium += 1;\n      total_medium_price += scroll[1];\n    }\n    if (scroll[0] === 140) {\n      great += 1;\n      total_great_price += scroll[1];\n    }\n    if (scroll[0] === 340) {\n      powerful += 1;\n      total_powerful_price += scroll[1];\n    }\n  }\n  const total_price = total_small_price + total_medium_price + total_great_price + total_powerful_price;\n  return [{\n    \"small\": small,\n    \"total_price\": total_small_price\n  }, {\n    \"medium\": medium,\n    \"total_price\": total_medium_price\n  }, {\n    \"great\": great,\n    \"total_price\": total_great_price\n  }, {\n    \"powerful\": powerful,\n    \"total_price\": total_powerful_price\n  }, {\n    \"total\": total_price\n  }];\n};\nexport default dooplon_optimizator;","map":{"version":3,"names":["knapsack","SMALL_DOOPLOONS","MEDIUM_DOOPLOONS","GREAT_DOOPLOONS","POWERFUL_DOOPLOONS","dooplon_optimizator","doploon_quantity","small_price","medium_price","great_price","powerful_price","scrolls","weight","value","int","console","log","result","small","total_small_price","medium","total_medium_price","great","total_great_price","powerful","total_powerful_price","scroll","total_price"],"sources":["/home/isaac/myProjects/dofus-doploons/dooplons-front/src/functions/doploon_optimizator.js"],"sourcesContent":["import knapsack from \"./knapsack\";\n\nconst SMALL_DOOPLOONS = 20;\nconst MEDIUM_DOOPLOONS = 60;\nconst GREAT_DOOPLOONS = 140;\nconst POWERFUL_DOOPLOONS = 340;\n\nconst dooplon_optimizator = (\n  doploon_quantity,\n  small_price,\n  medium_price,\n  great_price,\n  powerful_price\n) => {\n  const scrolls = [\n    { weight: SMALL_DOOPLOONS, value: int(small_price) },\n    { weight: MEDIUM_DOOPLOONS, value: int(medium_price) },\n    { weight: GREAT_DOOPLOONS, value: int(great_price) },\n    { weight: POWERFUL_DOOPLOONS, value: powerful_price },\n  ];\n\n  console.log(scrolls, doploon_quantity);\n\n  const result = knapsack(scrolls, doploon_quantity);\n\n  let small = 0;\n  let total_small_price = 0;\n\n  let medium = 0;\n  let total_medium_price = 0;\n\n  let great = 0;\n  let total_great_price = 0;\n\n  let powerful = 0;\n  let total_powerful_price = 0;\n\n  for (const scroll of result) {\n    if (scroll[0] === 20) {\n      small += 1;\n      total_small_price += scroll[1];\n    }\n    if (scroll[0] === 60) {\n      medium += 1;\n      total_medium_price += scroll[1];\n    }\n    if (scroll[0] === 140) {\n      great += 1;\n      total_great_price += scroll[1];\n    }\n    if (scroll[0] === 340) {\n      powerful += 1;\n      total_powerful_price += scroll[1];\n    }\n  }\n\n  const total_price =\n    total_small_price +\n    total_medium_price +\n    total_great_price +\n    total_powerful_price;\n\n  return [\n    { \"small\": small, \"total_price\": total_small_price },\n    { \"medium\": medium, \"total_price\": total_medium_price },\n    { \"great\": great, \"total_price\": total_great_price },\n    { \"powerful\": powerful, \"total_price\": total_powerful_price },\n    { \"total\": total_price },\n  ];\n};\n\nexport default dooplon_optimizator;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAEjC,MAAMC,eAAe,GAAG,EAAE;AAC1B,MAAMC,gBAAgB,GAAG,EAAE;AAC3B,MAAMC,eAAe,GAAG,GAAG;AAC3B,MAAMC,kBAAkB,GAAG,GAAG;AAE9B,MAAMC,mBAAmB,GAAGA,CAC1BC,gBAAgB,EAChBC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,cAAc,KACX;EACH,MAAMC,OAAO,GAAG,CACd;IAAEC,MAAM,EAAEX,eAAe;IAAEY,KAAK,EAAEC,GAAG,CAACP,WAAW;EAAE,CAAC,EACpD;IAAEK,MAAM,EAAEV,gBAAgB;IAAEW,KAAK,EAAEC,GAAG,CAACN,YAAY;EAAE,CAAC,EACtD;IAAEI,MAAM,EAAET,eAAe;IAAEU,KAAK,EAAEC,GAAG,CAACL,WAAW;EAAE,CAAC,EACpD;IAAEG,MAAM,EAAER,kBAAkB;IAAES,KAAK,EAAEH;EAAe,CAAC,CACtD;EAEDK,OAAO,CAACC,GAAG,CAACL,OAAO,EAAEL,gBAAgB,CAAC;EAEtC,MAAMW,MAAM,GAAGjB,QAAQ,CAACW,OAAO,EAAEL,gBAAgB,CAAC;EAElD,IAAIY,KAAK,GAAG,CAAC;EACb,IAAIC,iBAAiB,GAAG,CAAC;EAEzB,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,kBAAkB,GAAG,CAAC;EAE1B,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,iBAAiB,GAAG,CAAC;EAEzB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,oBAAoB,GAAG,CAAC;EAE5B,KAAK,MAAMC,MAAM,IAAIT,MAAM,EAAE;IAC3B,IAAIS,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;MACpBR,KAAK,IAAI,CAAC;MACVC,iBAAiB,IAAIO,MAAM,CAAC,CAAC,CAAC;IAChC;IACA,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;MACpBN,MAAM,IAAI,CAAC;MACXC,kBAAkB,IAAIK,MAAM,CAAC,CAAC,CAAC;IACjC;IACA,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACrBJ,KAAK,IAAI,CAAC;MACVC,iBAAiB,IAAIG,MAAM,CAAC,CAAC,CAAC;IAChC;IACA,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACrBF,QAAQ,IAAI,CAAC;MACbC,oBAAoB,IAAIC,MAAM,CAAC,CAAC,CAAC;IACnC;EACF;EAEA,MAAMC,WAAW,GACfR,iBAAiB,GACjBE,kBAAkB,GAClBE,iBAAiB,GACjBE,oBAAoB;EAEtB,OAAO,CACL;IAAE,OAAO,EAAEP,KAAK;IAAE,aAAa,EAAEC;EAAkB,CAAC,EACpD;IAAE,QAAQ,EAAEC,MAAM;IAAE,aAAa,EAAEC;EAAmB,CAAC,EACvD;IAAE,OAAO,EAAEC,KAAK;IAAE,aAAa,EAAEC;EAAkB,CAAC,EACpD;IAAE,UAAU,EAAEC,QAAQ;IAAE,aAAa,EAAEC;EAAqB,CAAC,EAC7D;IAAE,OAAO,EAAEE;EAAY,CAAC,CACzB;AACH,CAAC;AAED,eAAetB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}