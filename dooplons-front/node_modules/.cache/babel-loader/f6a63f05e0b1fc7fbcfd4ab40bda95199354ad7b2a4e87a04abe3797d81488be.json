{"ast":null,"code":"const knapsack = (items, capacity) => {\n  const n = items.length;\n  const table = Array.from({\n    length: n + 1\n  }, () => Array(capacity + 1).fill(0));\n  for (let i = 1; i <= n; i++) {\n    const {\n      weight,\n      value\n    } = items[i - 1];\n    for (let j = 1; j <= capacity; j++) {\n      let maxVal = table[i - 1][j];\n      for (let k = 1; k <= Math.floor(j / weight); k++) {\n        const newVal = table[i - 1][j - weight * k] + value * k;\n        if (newVal > maxVal) {\n          maxVal = newVal;\n        }\n      }\n      table[i][j] = maxVal;\n    }\n  }\n  const result = [];\n  let i = n;\n  let j = capacity;\n  while (i > 0 && j > 0) {\n    const {\n      weight,\n      value\n    } = items[i - 1];\n    if (table[i][j] !== table[i - 1][j]) {\n      const count = Math.floor((j - table[i - 1][j]) / weight);\n      result.push({\n        ...items[i - 1],\n        count\n      });\n      j -= weight * count;\n    }\n    i -= 1;\n  }\n  return result.reverse();\n};\nexport default knapsack;","map":{"version":3,"names":["knapsack","items","capacity","n","length","table","Array","from","fill","i","weight","value","j","maxVal","k","Math","floor","newVal","result","count","push","reverse"],"sources":["/home/isaac/myProjects/dofus-doploons/dooplons-front/src/functions/knapsack.js"],"sourcesContent":["const knapsack = (items, capacity) => {\n  const n = items.length;\n  const table = Array.from({ length: n + 1 }, () =>\n    Array(capacity + 1).fill(0)\n  );\n\n  for (let i = 1; i <= n; i++) {\n    const { weight, value } = items[i - 1];\n\n    for (let j = 1; j <= capacity; j++) {\n      let maxVal = table[i - 1][j];\n      for (let k = 1; k <= Math.floor(j / weight); k++) {\n        const newVal = table[i - 1][j - weight * k] + value * k;\n        if (newVal > maxVal) {\n          maxVal = newVal;\n        }\n      }\n      table[i][j] = maxVal;\n    }\n  }\n\n  const result = [];\n  let i = n;\n  let j = capacity;\n  while (i > 0 && j > 0) {\n    const { weight, value } = items[i - 1];\n    if (table[i][j] !== table[i - 1][j]) {\n      const count = Math.floor((j - table[i - 1][j]) / weight);\n      result.push({ ...items[i - 1], count });\n      j -= weight * count;\n    }\n    i -= 1;\n  }\n\n  return result.reverse();\n};\n\nexport default knapsack;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACpC,MAAMC,CAAC,GAAGF,KAAK,CAACG,MAAM;EACtB,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAED,CAAC,GAAG;EAAE,CAAC,EAAE,MAC1CG,KAAK,CAACJ,QAAQ,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC,CAC5B;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,CAAC,EAAEM,CAAC,EAAE,EAAE;IAC3B,MAAM;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAGV,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC;IAEtC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIV,QAAQ,EAAEU,CAAC,EAAE,EAAE;MAClC,IAAIC,MAAM,GAAGR,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACG,CAAC,CAAC;MAC5B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACJ,CAAC,GAAGF,MAAM,CAAC,EAAEI,CAAC,EAAE,EAAE;QAChD,MAAMG,MAAM,GAAGZ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACG,CAAC,GAAGF,MAAM,GAAGI,CAAC,CAAC,GAAGH,KAAK,GAAGG,CAAC;QACvD,IAAIG,MAAM,GAAGJ,MAAM,EAAE;UACnBA,MAAM,GAAGI,MAAM;QACjB;MACF;MACAZ,KAAK,CAACI,CAAC,CAAC,CAACG,CAAC,CAAC,GAAGC,MAAM;IACtB;EACF;EAEA,MAAMK,MAAM,GAAG,EAAE;EACjB,IAAIT,CAAC,GAAGN,CAAC;EACT,IAAIS,CAAC,GAAGV,QAAQ;EAChB,OAAOO,CAAC,GAAG,CAAC,IAAIG,CAAC,GAAG,CAAC,EAAE;IACrB,MAAM;MAAEF,MAAM;MAAEC;IAAM,CAAC,GAAGV,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC;IACtC,IAAIJ,KAAK,CAACI,CAAC,CAAC,CAACG,CAAC,CAAC,KAAKP,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACG,CAAC,CAAC,EAAE;MACnC,MAAMO,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAAC,CAACJ,CAAC,GAAGP,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAACG,CAAC,CAAC,IAAIF,MAAM,CAAC;MACxDQ,MAAM,CAACE,IAAI,CAAC;QAAE,GAAGnB,KAAK,CAACQ,CAAC,GAAG,CAAC,CAAC;QAAEU;MAAM,CAAC,CAAC;MACvCP,CAAC,IAAIF,MAAM,GAAGS,KAAK;IACrB;IACAV,CAAC,IAAI,CAAC;EACR;EAEA,OAAOS,MAAM,CAACG,OAAO,EAAE;AACzB,CAAC;AAED,eAAerB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}